service: dynamodb-crud-api

provider:
  name: aws
  runtime: nodejs14.x
  stage: dev
  region: us-east-2
  environment:
    DYNAMODB_TABLE_NAME: ${self:custom.postsTableName}

custom:
  postsTableName: posts-table-${self:provider.stage}

  swaggerUi:
  
    # [Optional] The content-type of the export. Currently application/json and application/yaml are supported for exportType of oas30 and swagger.
    accepts: application/yaml # default value
    # [Optional] For exportType oas30 and swagger, any combination of the following parameters are supported: extensions='integrations' or extensions='apigateway' will export the API with x-amazon-apigateway-integration extensions. extensions='authorizers' will export the API with x-amazon-apigateway-authorizer extensions. postman will export the API with Postman extensions, allowing for import to the Postman tool.
    extensions: integrations # default value
    # [Optional] The name of local directory to build Swagger UI static site
    swaggerUiDirectoryName: .swagger-ui # default value
    # [Optional] Swagger UI configuration. See https://swagger.io/docs/open-source-tools/swagger-ui/usage/configuration/ . 'configUrl' and 'url' will be ignored.
    swaggerUiConfig: # default value is the below
      dom_id: '#swagger-ui'
      deepLinking: true
      presets:
        - SwaggerUIBundle.presets.apis
        - SwaggerUIStandalonePreset
      plugins:
        - SwaggerUIBundle.plugins.DownloadUrl
      layout:
        - StandaloneLayout
 

plugins:
#  - serverless-auto-swagger
  - serverless-plugin-swagger-ui
  - serverless-iam-roles-per-function

functions:
  welcome:
    handler: api.welcome
    name: welcome
    memorySize: 128 # mb
    timeout: 5 # seconds
    events:
      - http:
          path: /
          method: GET
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:GetItem"
        Resource: !GetAtt PostsTable.Arn
  mani:
    handler: api.getPostByAuthor
    name: mani
    memorySize: 128 # mb
    timeout: 5 # seconds
    events:
      - http:
          path: posts/{author}
          method: GET
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:Query"  # this is how you comment things in YAML
          - "dynamodb:Scan"
          - "dynamodb:Get*"
        Resource: arn:aws:dynamodb:us-east-2:749333884984:table/posts-table-dev/index/author-content-index
  getPost:
    handler: api.getPost
    name: get-post 
    memorySize: 128 # mb
    timeout: 5 # seconds
    events:
      - http:
          path: post/{postId}
          method: GET
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:GetItem"
        Resource: !GetAtt PostsTable.Arn
  createPost:
    handler: api.createPost
    name: create-post
    memorySize: 128 # mb
    timeout: 5 # seconds
    events:
      - http:
          path: post
          method: POST
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:PutItem"
        Resource: !GetAtt PostsTable.Arn
  updatePost:
    handler: api.updatePost
    name: update-post
    memorySize: 128 # mb
    timeout: 5 # seconds
    events:
      - http:
          path: post/{postId}
          method: PUT
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:UpdateItem"
        Resource: !GetAtt PostsTable.Arn
    
  deletePost:
    handler: api.deletePost
    name: delete-post
    memorySize: 128 # mb
    timeout: 5 # seconds
    events:
      - http:
          path: post/{postId}
          method: DELETE
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:DeleteItem"
        Resource: !GetAtt PostsTable.Arn
  getAllPosts:
    handler: api.getAllPosts
    name: get-all-posts
    memorySize: 128 # mb
    timeout: 5 # seconds
    events:
      - http:
          path: posts
          method: GET
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:Scan"
        Resource: !GetAtt PostsTable.Arn

        
    
resources:
  Resources:
    PostsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.postsTableName}
        AttributeDefinitions:
          - AttributeName: postId
            AttributeType: S
          - AttributeName: author
            AttributeType: S
        KeySchema:
          - AttributeName: postId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 10
          WriteCapacityUnits: 10
          #GSIs
        GlobalSecondaryIndexes:
          - IndexName: author-content-index
            KeySchema:
              - AttributeName: author
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1

