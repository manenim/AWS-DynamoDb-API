service: dynamodb-crud-api

provider:
  name: aws
  runtime: nodejs14.x
  stage: dev
  region: us-east-2
  environment:
    DYNAMODB_TABLE_NAME: ${self:custom.postsTableName}

custom:
  postsTableName: posts-table-${self:provider.stage}

plugins:
  - serverless-iam-roles-per-function

functions:
  welcome:
    handler: api.welcome
    name: welcome
    memorySize: 128 # mb
    timeout: 5 # seconds
    events:
      - http:
          path: /
          method: GET
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:GetItem"
        Resource: !GetAtt PostsTable.Arn
  mani:
    handler: api.getPostByAuthor
    name: mani
    memorySize: 128 # mb
    timeout: 5 # seconds
    events:
      - http:
          path: posts/{author}
          method: GET
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:Query"  # this is how you comment things in YAML
          - "dynamodb:Scan"
          - "dynamodb:Get*"
        Resource: arn:aws:dynamodb:us-east-2:749333884984:table/posts-table-dev/index/author-content-index
  getPost:
    handler: api.getPost
    name: get-post 
    memorySize: 128 # mb
    timeout: 5 # seconds
    events:
      - http:
          path: post/{postId}
          method: GET
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:GetItem"
        Resource: !GetAtt PostsTable.Arn
  createPost:
    handler: api.createPost
    name: create-post
    memorySize: 128 # mb
    timeout: 5 # seconds
    events:
      - http:
          path: post
          method: POST
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:PutItem"
        Resource: !GetAtt PostsTable.Arn
  updatePost:
    handler: api.updatePost
    name: update-post
    memorySize: 128 # mb
    timeout: 5 # seconds
    events:
      - http:
          path: post/{postId}
          method: PUT
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:UpdateItem"
        Resource: !GetAtt PostsTable.Arn
    
  deletePost:
    handler: api.deletePost
    name: delete-post
    memorySize: 128 # mb
    timeout: 5 # seconds
    events:
      - http:
          path: post/{postId}
          method: DELETE
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:DeleteItem"
        Resource: !GetAtt PostsTable.Arn
  getAllPosts:
    handler: api.getAllPosts
    name: get-all-posts
    memorySize: 128 # mb
    timeout: 5 # seconds
    events:
      - http:
          path: posts
          method: GET
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:Scan"
        Resource: !GetAtt PostsTable.Arn

resources:
  Resources:
    PostsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.postsTableName}
        AttributeDefinitions:
          - AttributeName: postId
            AttributeType: S
          - AttributeName: author
            AttributeType: S
        KeySchema:
          - AttributeName: postId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 10
          WriteCapacityUnits: 10
          #GSIs
        GlobalSecondaryIndexes:
          - IndexName: author-content-index
            KeySchema:
              - AttributeName: author
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1

# Swagger documentation

documentation:
  title: My Serverless API
  version: 1.0.0
  description: This API provides endpoints to manage user data.
  basepath: /
  # Define API Gateway settings
  apiGateway:
    shouldStartNameWithService: true
    binaryMediaTypes:
      - 'image/png'
      - 'image/jpeg'
    minimumCompressionSize: 1024
    description: My Serverless API Gateway
    metrics:
      - name: Latency
        unit: milliseconds
      - name: IntegrationLatency
        unit: milliseconds
    logging:
      accessLogging: true
      executionLogging: true
    endpointConfiguration:
      types:
        - REGIONAL
    cors:
      origins:
        - '*'
      headers:
        - Authorization
        - Content-Type
      methods:
        - OPTIONS
        - POST
        - GET
        - PUT
        - PATCH
        - DELETE
        
 
